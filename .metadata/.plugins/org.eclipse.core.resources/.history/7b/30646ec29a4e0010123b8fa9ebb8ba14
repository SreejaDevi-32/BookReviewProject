package com.BookReviewPla.customer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.time.LocalDate;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.BookReviewPla.Repository.BookRepository;
import com.BookReviewPla.Service.BookService;
import com.BookReviewPla.controller.BookController;
import com.BookReviewPla.model.Book;
import com.BookReviewPla.security.SecurityFilterChainConfig;

@SpringBootTest
@AutoConfigureMockMvc
@Import(SecurityFilterChainConfig.class)
public class BookControllerTest {

	@Autowired
	 private MockMvc mockMvc;
	
	@MockBean
	 private BookService bookService;
	 
	@Autowired
	 private ObjectMapper objectMapper;
	
	@MockBean
	private BookRepository bookRepository;

	 
	@Test
	void testCreateBook() throws Exception {
	    Book book = new Book(null, "Spring", "Author X", "Tech", LocalDate.parse("2025-06-19"));
	    //Book savedBook = new Book(1L, "Spring", "Author X", "Tech", LocalDate.parse("2025-06-19"));

	    //when(bookService.addBook(any(Book.class))).thenReturn(savedBook);
	    Book savedBook = bookRepository.save(book);

	    // Perform request and capture response
	    MvcResult result = mockMvc.perform(post("/api/v1/book")
	                    .contentType(MediaType.APPLICATION_JSON)
	                    .content(objectMapper.writeValueAsString(book)))
	            .andExpect(status().isOk())
	            .andReturn();

	    // Convert response JSON to Book object
	    String responseBody = result.getResponse().getContentAsString();
	    Book actualResponse = objectMapper.readValue(responseBody, Book.class);

	    // Assert equality
	    assertEquals(savedBook, actualResponse);
	}
	

}
